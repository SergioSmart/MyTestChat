@page "/"
@using Grpc.Core
@using MyTestChat.Protos

@inject ChatRoom.ChatRoomClient ChatRoomClient
@inject NavigationManager NavigationManager

@implements IDisposable

<div style="height: 80vh; width: 50vw;">  
    <Grid RowDefinitions="* auto">
        <GridChild Row="1" VerticalAlignment="VerticalAlignment.Bottom" style="overflow-y: auto; max-height: 100%">
            <ChatMessagesView Messages=_messages/>
        </GridChild>
        
        <GridChild Row="2">
            <RadzenTextArea @bind-Value="_message"
                            Placeholder="Enter here..."
                            Style="margin-bottom: 20px; width: 100%" />
            <RadzenButton Click="SendMessageAsync">Send</RadzenButton>
        </GridChild>

    </Grid>
</div>

@code
{
    private readonly List<string> _messages = new List<string>();
    private readonly CancellationTokenSource _cancelTokenSource = new CancellationTokenSource();
    private string _message;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        var serverStream = ChatRoomClient.JoinChat(new ChatRequest(), cancellationToken: _cancelTokenSource.Token);
        var stream = serverStream.ResponseStream;

        try
        {
            await foreach (var message in stream.ReadAllAsync(_cancelTokenSource.Token))
            {
                _messages.Add(message.Message);
                this.StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        } 
        finally
        {
            serverStream.Dispose();
        }
    }

    private async Task SendMessageAsync()
    {     
        if (string.IsNullOrEmpty(_message))
            return;
        await ChatRoomClient.SendAsync(new ChatMessage
        {
            Message = _message
        });
        _message = "";
    }

    private void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Dispose();
    }

    public void Dispose()
    {
        _cancelTokenSource.Cancel();
    }
}
